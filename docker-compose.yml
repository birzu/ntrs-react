version: '3.7'
# use 2.* if testing with swarm in local dev environment otherwise depends on does not work

services:
  proxy:
    image: traefik:2.1.4
    restart: always
    networks:
      - traefik-proxy
    ports:
      - '80:80'
      - '8080:8080' # dashboard
    command:
      # api settings
      #- --api.insecure=true
      - --api=true
      - --api.dashboard=true
      - --api.debug=true
      # log setting
      - --log.level=INFO
      # tracing
      #- --tracing=true
      #- --tracing.serviceName=api
      # provider settings
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=traefik-proxy
      # entrypoints
      - --entrypoints.web.address=:80 # <===> defining entrypoint for http on port 80 named web
    # - --entrypoints.web-secured.address=:443 <===> defining entrypoint for https on port 443 named web-secured
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      # define the rules of the traefik proxy for this container
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`monitor.localhost`)'
      - 'traefik.http.routers.api.service=api@internal'
      - 'traefik.http.routers.api.middlewares=auth'
      - 'traefik.http.services.api.loadbalancer.server.port=8080'
      - 'traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$12$$clzXj8NS26OVISVxncGEOe5uyX21jU3/PwLChAFPdmAq6KP9T1LFC'

  redis:
    image: redis:5.0.7
    networks:
      - backend
    healthcheck:
      test: redis-cli ping

  web-client:
    build:
      context: ./web-client
      target: dev
    networks:
      - traefik-proxy
      - frontend
    ports:
      - '9228:9229'
    # env_file
    depends_on:
      - web-server
    volumes:
      # bind-mount the working dir
      - ./web-client:/opt/node/react_app
      # create an empty volume for the node_modules folder
      - /opt/node/react_app/node_modules
    labels:
      # define the rules of the traefik proxy for this service
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend-client.rule=Host(`natours.localhost`) && (PathPrefix(`/`))'
      - 'traefik.http.routers.frontend-client.entrypoints=web'
      - 'traefik.http.routers.frontend-client.service=web-client-natours'
      - 'traefik.http.services.web-client-natours.loadbalancer.server.scheme=http'
      - 'traefik.http.services.web-client-natours.loadbalancer.server.port=3000'

  web-server:
    build:
      context: ./web-server
      target: dev
    networks:
      - traefik-proxy
      - backend
      - frontend
    ports:
      - '9229:9229'
    env_file: ./web-server/config.env
    depends_on:
      - redis
    volumes:
      - ./web-server/:/opt/node/node_app/ # bind mounts the working dir
      - /opt/node/node_app/node_modules # create an empty volume in the working dir for node_modules
    labels:
      # define the rules of the traefik proxy for this service
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend-server.rule=Host(`natours.localhost`) && (PathPrefix(`/_/api`))'
      - 'traefik.http.routers.backend-server.entrypoints=web'
      - 'traefik.http.routers.backend-server.service=web-server-natours'
      - 'traefik.http.services.web-server-natours.loadbalancer.server.scheme=http'
      - 'traefik.http.services.web-server-natours.loadbalancer.server.port=4000'

networks:
  backend:
  frontend:
  traefik-proxy:
    name: traefik-proxy
